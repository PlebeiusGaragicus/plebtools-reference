# https://docs.start9.com/latest/developer-docs/specification/manifest

# must be unique amongst all other known packages - underscore is not allowed
id: plebg-plebtools

title: "PlebTools"

# https://github.com/Start9Labs/emver-rs
# major, minor, patch, and revision
version: 0.2.0

release-notes: >-
  Still very much a work in progress.

  Maybe I'll finish this project before I die... maybe not.

license: mit

wrapper-repo: "https://github.com/PlebeiusGaragicus/plebtools"
# upstream-repo: "https://github.com/PlebeiusGaragicus/plebtools"
upstream-repo: "https://github.com/PlebeiusGaragicus/plebtools"
support-site: "https://github.com/PlebeiusGaragicus/plebtools/issues"

build: ["make"]

description:
  short: A collection of tools for the Bitcoin Pleb.
  long: >-
    These tools aim to empower the Bitcoin Pleb to take control of their own node, read the blockchain and do their own research.

    This is a work in progress and I am slowly adding features and tidying up the code.

    New tools will be added as I have time to work on them.

# These assets are static files necessary for packaging the service for Start9 (into an s9pk). Each value is a path to the specified asset. If an asset is missing from this list, or otherwise denoted, it will be defaulted to the values denoted below.
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  docker-images: image.tar

main:
  type: docker
  # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
  image: main
  # The executable binary for starting the initialization action. For docker actions, this is typically a "docker_entrypoint.sh" file. See the Dockerfile and the docker_entrypoint.sh in this project for additional details.
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    # TODO _ I need to figure out how to mount the volume to the docker container
    main: /root/.plebtools

health-checks: {}
config: ~
properties: ~

volumes:
  main:
    type: data
# This specifies how to configure the port mapping for exposing the service over TOR and LAN (if applicable). Many interfaces can be specified depending on the needs of the service. If it can be launched over a Local Area Network connection, specify a `lan-config`. Otherwise, at minimum, a `tor-config` must be specified.
interfaces:
  # This key is the internal name that the OS will use to configure the interface
  main:
    name: User Interface
    description: Launch the web interface for PlebTools
    tor-config:
      # Port mappings are from the external port to the internal container port
      port-mapping:
        8080: "8080"
    # Port mappings are from the external port to the internal container port
    lan-config:
      443:
        ssl: true
        internal: 8080
    ui: true
    protocols:
      - tcp
      - http

dependencies:
  # btc-rpc-proxy:
  #   version: ">=0.3.2.6 <0.4.0"
  #   requirement:
  #     type: "opt-out"
  #     how: Can alternatively use the internal full archival bitcoind node or configure an external bitcoin node.
  #   description: Used to fetch validated blocks.
  #   config:
  #     check:
  #       type: script
  #     auto-configure:
  #       type: script
  bitcoind:
    version: ">=0.21.1.2 <26.0.0"
    # critical: true
    requirement:
      type: "required"
    description: A local full archival node is required to run PlebTools.
    # config:
    #   check:
    #     type: script
    #   auto-configure:
    #     type: script

backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /root/data
      - /mnt/backup
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"

# https://docs.start9.com/latest/developer-docs/specification/js-procedure
migrations:
  from:
    "*":
      type: script
      args: ["from"]
  to:
    "*":
      type: script
      args: ["to"]
